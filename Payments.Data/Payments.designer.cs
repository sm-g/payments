#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Payments.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PaymentsDatabase")]
	public partial class PaymentsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBenefit(Benefit instance);
    partial void UpdateBenefit(Benefit instance);
    partial void DeleteBenefit(Benefit instance);
    partial void InsertFlatType(FlatType instance);
    partial void UpdateFlatType(FlatType instance);
    partial void DeleteFlatType(FlatType instance);
    partial void InsertFlat(Flat instance);
    partial void UpdateFlat(Flat instance);
    partial void DeleteFlat(Flat instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertSettlement(Settlement instance);
    partial void UpdateSettlement(Settlement instance);
    partial void DeleteSettlement(Settlement instance);
    partial void InsertReading(Reading instance);
    partial void UpdateReading(Reading instance);
    partial void DeleteReading(Reading instance);
    partial void InsertRate(Rate instance);
    partial void UpdateRate(Rate instance);
    partial void DeleteRate(Rate instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertStreet(Street instance);
    partial void UpdateStreet(Street instance);
    partial void DeleteStreet(Street instance);
    partial void InsertStreetType(StreetType instance);
    partial void UpdateStreetType(StreetType instance);
    partial void DeleteStreetType(StreetType instance);
    partial void InsertPayer(Payer instance);
    partial void UpdatePayer(Payer instance);
    partial void DeletePayer(Payer instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertMeter(Meter instance);
    partial void UpdateMeter(Meter instance);
    partial void DeleteMeter(Meter instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertMeterType(MeterType instance);
    partial void UpdateMeterType(MeterType instance);
    partial void DeleteMeterType(MeterType instance);
    #endregion
		
		public PaymentsDataContext() : 
				base(global::Payments.Data.Properties.Settings.Default.PaymentsDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Benefit> Benefits
		{
			get
			{
				return this.GetTable<Benefit>();
			}
		}
		
		public System.Data.Linq.Table<FlatType> FlatTypes
		{
			get
			{
				return this.GetTable<FlatType>();
			}
		}
		
		public System.Data.Linq.Table<Flat> Flats
		{
			get
			{
				return this.GetTable<Flat>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<Settlement> Settlements
		{
			get
			{
				return this.GetTable<Settlement>();
			}
		}
		
		public System.Data.Linq.Table<Reading> Readings
		{
			get
			{
				return this.GetTable<Reading>();
			}
		}
		
		public System.Data.Linq.Table<Rate> Rates
		{
			get
			{
				return this.GetTable<Rate>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<Street> Streets
		{
			get
			{
				return this.GetTable<Street>();
			}
		}
		
		public System.Data.Linq.Table<StreetType> StreetTypes
		{
			get
			{
				return this.GetTable<StreetType>();
			}
		}
		
		public System.Data.Linq.Table<Payer> Payers
		{
			get
			{
				return this.GetTable<Payer>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<Meter> Meters
		{
			get
			{
				return this.GetTable<Meter>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<MeterType> MeterTypes
		{
			get
			{
				return this.GetTable<MeterType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Benefit")]
	public partial class Benefit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BenefitID;
		
		private string _Name;
		
		private EntitySet<Rate> _Rates;
		
		private EntitySet<Payer> _Payers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBenefitIDChanging(int value);
    partial void OnBenefitIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Benefit()
		{
			this._Rates = new EntitySet<Rate>(new Action<Rate>(this.attach_Rates), new Action<Rate>(this.detach_Rates));
			this._Payers = new EntitySet<Payer>(new Action<Payer>(this.attach_Payers), new Action<Payer>(this.detach_Payers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BenefitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BenefitID
		{
			get
			{
				return this._BenefitID;
			}
			set
			{
				if ((this._BenefitID != value))
				{
					this.OnBenefitIDChanging(value);
					this.SendPropertyChanging();
					this._BenefitID = value;
					this.SendPropertyChanged("BenefitID");
					this.OnBenefitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benefit_Rate", Storage="_Rates", ThisKey="BenefitID", OtherKey="BenefitID")]
		public EntitySet<Rate> Rates
		{
			get
			{
				return this._Rates;
			}
			set
			{
				this._Rates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benefit_Payer", Storage="_Payers", ThisKey="BenefitID", OtherKey="BenefitID")]
		public EntitySet<Payer> Payers
		{
			get
			{
				return this._Payers;
			}
			set
			{
				this._Payers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Benefit = this;
		}
		
		private void detach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Benefit = null;
		}
		
		private void attach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.Benefit = this;
		}
		
		private void detach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.Benefit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlatType")]
	public partial class FlatType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlatTypeID;
		
		private string _Name;
		
		private EntitySet<Flat> _Flats;
		
		private EntitySet<Rate> _Rates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlatTypeIDChanging(int value);
    partial void OnFlatTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FlatType()
		{
			this._Flats = new EntitySet<Flat>(new Action<Flat>(this.attach_Flats), new Action<Flat>(this.detach_Flats));
			this._Rates = new EntitySet<Rate>(new Action<Rate>(this.attach_Rates), new Action<Rate>(this.detach_Rates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FlatTypeID
		{
			get
			{
				return this._FlatTypeID;
			}
			set
			{
				if ((this._FlatTypeID != value))
				{
					this.OnFlatTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FlatTypeID = value;
					this.SendPropertyChanged("FlatTypeID");
					this.OnFlatTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlatType_Flat", Storage="_Flats", ThisKey="FlatTypeID", OtherKey="FlatTypeID")]
		public EntitySet<Flat> Flats
		{
			get
			{
				return this._Flats;
			}
			set
			{
				this._Flats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlatType_Rate", Storage="_Rates", ThisKey="FlatTypeID", OtherKey="FlatTypeID")]
		public EntitySet<Rate> Rates
		{
			get
			{
				return this._Rates;
			}
			set
			{
				this._Rates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flats(Flat entity)
		{
			this.SendPropertyChanging();
			entity.FlatType = this;
		}
		
		private void detach_Flats(Flat entity)
		{
			this.SendPropertyChanging();
			entity.FlatType = null;
		}
		
		private void attach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.FlatType = this;
		}
		
		private void detach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.FlatType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flat")]
	public partial class Flat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlatID;
		
		private System.Nullable<short> _Number;
		
		private System.Nullable<byte> _LivingMen;
		
		private System.Nullable<decimal> _CommonArea;
		
		private System.Nullable<decimal> _LivingArea;
		
		private int _FlatTypeID;
		
		private int _HouseID;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<FlatType> _FlatType;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlatIDChanging(int value);
    partial void OnFlatIDChanged();
    partial void OnNumberChanging(System.Nullable<short> value);
    partial void OnNumberChanged();
    partial void OnLivingMenChanging(System.Nullable<byte> value);
    partial void OnLivingMenChanged();
    partial void OnCommonAreaChanging(System.Nullable<decimal> value);
    partial void OnCommonAreaChanged();
    partial void OnLivingAreaChanging(System.Nullable<decimal> value);
    partial void OnLivingAreaChanged();
    partial void OnFlatTypeIDChanging(int value);
    partial void OnFlatTypeIDChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    #endregion
		
		public Flat()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._FlatType = default(EntityRef<FlatType>);
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FlatID
		{
			get
			{
				return this._FlatID;
			}
			set
			{
				if ((this._FlatID != value))
				{
					this.OnFlatIDChanging(value);
					this.SendPropertyChanging();
					this._FlatID = value;
					this.SendPropertyChanged("FlatID");
					this.OnFlatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="SmallInt")]
		public System.Nullable<short> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingMen", DbType="TinyInt")]
		public System.Nullable<byte> LivingMen
		{
			get
			{
				return this._LivingMen;
			}
			set
			{
				if ((this._LivingMen != value))
				{
					this.OnLivingMenChanging(value);
					this.SendPropertyChanging();
					this._LivingMen = value;
					this.SendPropertyChanged("LivingMen");
					this.OnLivingMenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommonArea", DbType="Decimal(7,3)")]
		public System.Nullable<decimal> CommonArea
		{
			get
			{
				return this._CommonArea;
			}
			set
			{
				if ((this._CommonArea != value))
				{
					this.OnCommonAreaChanging(value);
					this.SendPropertyChanging();
					this._CommonArea = value;
					this.SendPropertyChanged("CommonArea");
					this.OnCommonAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingArea", DbType="Decimal(7,3)")]
		public System.Nullable<decimal> LivingArea
		{
			get
			{
				return this._LivingArea;
			}
			set
			{
				if ((this._LivingArea != value))
				{
					this.OnLivingAreaChanging(value);
					this.SendPropertyChanging();
					this._LivingArea = value;
					this.SendPropertyChanged("LivingArea");
					this.OnLivingAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatTypeID", DbType="Int NOT NULL")]
		public int FlatTypeID
		{
			get
			{
				return this._FlatTypeID;
			}
			set
			{
				if ((this._FlatTypeID != value))
				{
					if (this._FlatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlatTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FlatTypeID = value;
					this.SendPropertyChanged("FlatTypeID");
					this.OnFlatTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flat_Registration", Storage="_Registrations", ThisKey="FlatID", OtherKey="FlatID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlatType_Flat", Storage="_FlatType", ThisKey="FlatTypeID", OtherKey="FlatTypeID", IsForeignKey=true)]
		public FlatType FlatType
		{
			get
			{
				return this._FlatType.Entity;
			}
			set
			{
				FlatType previousValue = this._FlatType.Entity;
				if (((previousValue != value) 
							|| (this._FlatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlatType.Entity = null;
						previousValue.Flats.Remove(this);
					}
					this._FlatType.Entity = value;
					if ((value != null))
					{
						value.Flats.Add(this);
						this._FlatTypeID = value.FlatTypeID;
					}
					else
					{
						this._FlatTypeID = default(int);
					}
					this.SendPropertyChanged("FlatType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Flat", Storage="_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Flats.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Flats.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Flat = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Flat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.House")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseID;
		
		private string _Number;
		
		private string _Building;
		
		private int _StreetID;
		
		private EntitySet<Flat> _Flats;
		
		private EntityRef<Street> _Street;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnBuildingChanging(string value);
    partial void OnBuildingChanged();
    partial void OnStreetIDChanging(int value);
    partial void OnStreetIDChanged();
    #endregion
		
		public House()
		{
			this._Flats = new EntitySet<Flat>(new Action<Flat>(this.attach_Flats), new Action<Flat>(this.detach_Flats));
			this._Street = default(EntityRef<Street>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Building", DbType="NVarChar(10)")]
		public string Building
		{
			get
			{
				return this._Building;
			}
			set
			{
				if ((this._Building != value))
				{
					this.OnBuildingChanging(value);
					this.SendPropertyChanging();
					this._Building = value;
					this.SendPropertyChanged("Building");
					this.OnBuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetID", DbType="Int NOT NULL")]
		public int StreetID
		{
			get
			{
				return this._StreetID;
			}
			set
			{
				if ((this._StreetID != value))
				{
					if (this._Street.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetIDChanging(value);
					this.SendPropertyChanging();
					this._StreetID = value;
					this.SendPropertyChanged("StreetID");
					this.OnStreetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="House_Flat", Storage="_Flats", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<Flat> Flats
		{
			get
			{
				return this._Flats;
			}
			set
			{
				this._Flats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_House", Storage="_Street", ThisKey="StreetID", OtherKey="StreetID", IsForeignKey=true)]
		public Street Street
		{
			get
			{
				return this._Street.Entity;
			}
			set
			{
				Street previousValue = this._Street.Entity;
				if (((previousValue != value) 
							|| (this._Street.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Street.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._Street.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._StreetID = value.StreetID;
					}
					else
					{
						this._StreetID = default(int);
					}
					this.SendPropertyChanged("Street");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flats(Flat entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Flats(Flat entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settlement")]
	public partial class Settlement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettlementID;
		
		private string _Name;
		
		private EntitySet<Street> _Streets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettlementIDChanging(int value);
    partial void OnSettlementIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Settlement()
		{
			this._Streets = new EntitySet<Street>(new Action<Street>(this.attach_Streets), new Action<Street>(this.detach_Streets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettlementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettlementID
		{
			get
			{
				return this._SettlementID;
			}
			set
			{
				if ((this._SettlementID != value))
				{
					this.OnSettlementIDChanging(value);
					this.SendPropertyChanging();
					this._SettlementID = value;
					this.SendPropertyChanged("SettlementID");
					this.OnSettlementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Settlement_Street", Storage="_Streets", ThisKey="SettlementID", OtherKey="SettlementID")]
		public EntitySet<Street> Streets
		{
			get
			{
				return this._Streets;
			}
			set
			{
				this._Streets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.Settlement = this;
		}
		
		private void detach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.Settlement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reading")]
	public partial class Reading : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReadingID;
		
		private decimal _Value;
		
		private int _MeterID;
		
		private System.DateTime _Date;
		
		private EntityRef<Meter> _Meter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReadingIDChanging(int value);
    partial void OnReadingIDChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Reading()
		{
			this._Meter = default(EntityRef<Meter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReadingID
		{
			get
			{
				return this._ReadingID;
			}
			set
			{
				if ((this._ReadingID != value))
				{
					this.OnReadingIDChanging(value);
					this.SendPropertyChanging();
					this._ReadingID = value;
					this.SendPropertyChanged("ReadingID");
					this.OnReadingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(8,3) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", DbType="Int NOT NULL")]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					if (this._Meter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Reading", Storage="_Meter", ThisKey="MeterID", OtherKey="MeterID", IsForeignKey=true)]
		public Meter Meter
		{
			get
			{
				return this._Meter.Entity;
			}
			set
			{
				Meter previousValue = this._Meter.Entity;
				if (((previousValue != value) 
							|| (this._Meter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meter.Entity = null;
						previousValue.Readings.Remove(this);
					}
					this._Meter.Entity = value;
					if ((value != null))
					{
						value.Readings.Add(this);
						this._MeterID = value.MeterID;
					}
					else
					{
						this._MeterID = default(int);
					}
					this.SendPropertyChanged("Meter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rate")]
	public partial class Rate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RateID;
		
		private string _Name;
		
		private decimal _Price;
		
		private System.Nullable<decimal> _Norm;
		
		private System.Nullable<decimal> _PriceAboveNorm;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private int _BenefitID;
		
		private int _FlatTypeID;
		
		private int _ServiceID;
		
		private EntityRef<Benefit> _Benefit;
		
		private EntityRef<FlatType> _FlatType;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRateIDChanging(int value);
    partial void OnRateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnNormChanging(System.Nullable<decimal> value);
    partial void OnNormChanged();
    partial void OnPriceAboveNormChanging(System.Nullable<decimal> value);
    partial void OnPriceAboveNormChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnBenefitIDChanging(int value);
    partial void OnBenefitIDChanged();
    partial void OnFlatTypeIDChanging(int value);
    partial void OnFlatTypeIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    #endregion
		
		public Rate()
		{
			this._Benefit = default(EntityRef<Benefit>);
			this._FlatType = default(EntityRef<FlatType>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RateID
		{
			get
			{
				return this._RateID;
			}
			set
			{
				if ((this._RateID != value))
				{
					this.OnRateIDChanging(value);
					this.SendPropertyChanging();
					this._RateID = value;
					this.SendPropertyChanged("RateID");
					this.OnRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Norm", DbType="Decimal(9,5)")]
		public System.Nullable<decimal> Norm
		{
			get
			{
				return this._Norm;
			}
			set
			{
				if ((this._Norm != value))
				{
					this.OnNormChanging(value);
					this.SendPropertyChanging();
					this._Norm = value;
					this.SendPropertyChanged("Norm");
					this.OnNormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceAboveNorm", DbType="Money")]
		public System.Nullable<decimal> PriceAboveNorm
		{
			get
			{
				return this._PriceAboveNorm;
			}
			set
			{
				if ((this._PriceAboveNorm != value))
				{
					this.OnPriceAboveNormChanging(value);
					this.SendPropertyChanging();
					this._PriceAboveNorm = value;
					this.SendPropertyChanged("PriceAboveNorm");
					this.OnPriceAboveNormChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BenefitID", DbType="Int NOT NULL")]
		public int BenefitID
		{
			get
			{
				return this._BenefitID;
			}
			set
			{
				if ((this._BenefitID != value))
				{
					if (this._Benefit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBenefitIDChanging(value);
					this.SendPropertyChanging();
					this._BenefitID = value;
					this.SendPropertyChanged("BenefitID");
					this.OnBenefitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatTypeID", DbType="Int NOT NULL")]
		public int FlatTypeID
		{
			get
			{
				return this._FlatTypeID;
			}
			set
			{
				if ((this._FlatTypeID != value))
				{
					if (this._FlatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlatTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FlatTypeID = value;
					this.SendPropertyChanged("FlatTypeID");
					this.OnFlatTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benefit_Rate", Storage="_Benefit", ThisKey="BenefitID", OtherKey="BenefitID", IsForeignKey=true)]
		public Benefit Benefit
		{
			get
			{
				return this._Benefit.Entity;
			}
			set
			{
				Benefit previousValue = this._Benefit.Entity;
				if (((previousValue != value) 
							|| (this._Benefit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benefit.Entity = null;
						previousValue.Rates.Remove(this);
					}
					this._Benefit.Entity = value;
					if ((value != null))
					{
						value.Rates.Add(this);
						this._BenefitID = value.BenefitID;
					}
					else
					{
						this._BenefitID = default(int);
					}
					this.SendPropertyChanged("Benefit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlatType_Rate", Storage="_FlatType", ThisKey="FlatTypeID", OtherKey="FlatTypeID", IsForeignKey=true)]
		public FlatType FlatType
		{
			get
			{
				return this._FlatType.Entity;
			}
			set
			{
				FlatType previousValue = this._FlatType.Entity;
				if (((previousValue != value) 
							|| (this._FlatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlatType.Entity = null;
						previousValue.Rates.Remove(this);
					}
					this._FlatType.Entity = value;
					if ((value != null))
					{
						value.Rates.Add(this);
						this._FlatTypeID = value.FlatTypeID;
					}
					else
					{
						this._FlatTypeID = default(int);
					}
					this.SendPropertyChanged("FlatType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Rate", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Rates.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Rates.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceID;
		
		private string _Name;
		
		private int _ServiceTypeID;
		
		private int _UnitID;
		
		private EntitySet<Rate> _Rates;
		
		private EntitySet<Payment> _Payments;
		
		private EntityRef<ServiceType> _ServiceType;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnServiceTypeIDChanging(int value);
    partial void OnServiceTypeIDChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    #endregion
		
		public Service()
		{
			this._Rates = new EntitySet<Rate>(new Action<Rate>(this.attach_Rates), new Action<Rate>(this.detach_Rates));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._ServiceType = default(EntityRef<ServiceType>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", DbType="Int NOT NULL")]
		public int ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Rate", Storage="_Rates", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<Rate> Rates
		{
			get
			{
				return this._Rates;
			}
			set
			{
				this._Rates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Payment", Storage="_Payments", ThisKey="ServiceID", OtherKey="ServiceID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Service", Storage="_ServiceType", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._ServiceTypeID = value.ServiceTypeID;
					}
					else
					{
						this._ServiceTypeID = default(int);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Service", Storage="_Unit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Services.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Services.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Rates(Rate entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _UserGroupID;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(byte value);
    partial void OnUserGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserGroup()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_User", Storage="_Users", ThisKey="UserGroupID", OtherKey="UserGroupID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Login;
		
		private string _Pass;
		
		private string _Salt;
		
		private byte _UserGroupID;
		
		private EntitySet<Payer> _Payers;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    partial void OnUserGroupIDChanging(byte value);
    partial void OnUserGroupIDChanged();
    #endregion
		
		public User()
		{
			this._Payers = new EntitySet<Payer>(new Action<Payer>(this.attach_Payers), new Action<Payer>(this.detach_Payers));
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="Char(64) NOT NULL", CanBeNull=false)]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="Char(64) NOT NULL", CanBeNull=false)]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="TinyInt NOT NULL")]
		public byte UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Payer", Storage="_Payers", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Payer> Payers
		{
			get
			{
				return this._Payers;
			}
			set
			{
				this._Payers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_User", Storage="_UserGroup", ThisKey="UserGroupID", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserGroupID = value.UserGroupID;
					}
					else
					{
						this._UserGroupID = default(byte);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Payers(Payer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceType")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceTypeID;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTypeIDChanging(int value);
    partial void OnServiceTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ServiceType()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Service", Storage="_Services", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Street")]
	public partial class Street : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StreetID;
		
		private string _Name;
		
		private System.Nullable<int> _StreetTypeID;
		
		private System.Nullable<int> _SettlementID;
		
		private EntitySet<House> _Houses;
		
		private EntityRef<Settlement> _Settlement;
		
		private EntityRef<StreetType> _StreetType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStreetIDChanging(int value);
    partial void OnStreetIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreetTypeIDChanging(System.Nullable<int> value);
    partial void OnStreetTypeIDChanged();
    partial void OnSettlementIDChanging(System.Nullable<int> value);
    partial void OnSettlementIDChanged();
    #endregion
		
		public Street()
		{
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			this._Settlement = default(EntityRef<Settlement>);
			this._StreetType = default(EntityRef<StreetType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StreetID
		{
			get
			{
				return this._StreetID;
			}
			set
			{
				if ((this._StreetID != value))
				{
					this.OnStreetIDChanging(value);
					this.SendPropertyChanging();
					this._StreetID = value;
					this.SendPropertyChanged("StreetID");
					this.OnStreetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetTypeID", DbType="Int")]
		public System.Nullable<int> StreetTypeID
		{
			get
			{
				return this._StreetTypeID;
			}
			set
			{
				if ((this._StreetTypeID != value))
				{
					if (this._StreetType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreetTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StreetTypeID = value;
					this.SendPropertyChanged("StreetTypeID");
					this.OnStreetTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettlementID", DbType="Int")]
		public System.Nullable<int> SettlementID
		{
			get
			{
				return this._SettlementID;
			}
			set
			{
				if ((this._SettlementID != value))
				{
					if (this._Settlement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettlementIDChanging(value);
					this.SendPropertyChanging();
					this._SettlementID = value;
					this.SendPropertyChanged("SettlementID");
					this.OnSettlementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Street_House", Storage="_Houses", ThisKey="StreetID", OtherKey="StreetID")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Settlement_Street", Storage="_Settlement", ThisKey="SettlementID", OtherKey="SettlementID", IsForeignKey=true)]
		public Settlement Settlement
		{
			get
			{
				return this._Settlement.Entity;
			}
			set
			{
				Settlement previousValue = this._Settlement.Entity;
				if (((previousValue != value) 
							|| (this._Settlement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Settlement.Entity = null;
						previousValue.Streets.Remove(this);
					}
					this._Settlement.Entity = value;
					if ((value != null))
					{
						value.Streets.Add(this);
						this._SettlementID = value.SettlementID;
					}
					else
					{
						this._SettlementID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Settlement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StreetType_Street", Storage="_StreetType", ThisKey="StreetTypeID", OtherKey="StreetTypeID", IsForeignKey=true)]
		public StreetType StreetType
		{
			get
			{
				return this._StreetType.Entity;
			}
			set
			{
				StreetType previousValue = this._StreetType.Entity;
				if (((previousValue != value) 
							|| (this._StreetType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StreetType.Entity = null;
						previousValue.Streets.Remove(this);
					}
					this._StreetType.Entity = value;
					if ((value != null))
					{
						value.Streets.Add(this);
						this._StreetTypeID = value.StreetTypeID;
					}
					else
					{
						this._StreetTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("StreetType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Street = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Street = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StreetType")]
	public partial class StreetType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StreetTypeID;
		
		private string _Suffix;
		
		private string _Fullname;
		
		private EntitySet<Street> _Streets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStreetTypeIDChanging(int value);
    partial void OnStreetTypeIDChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    #endregion
		
		public StreetType()
		{
			this._Streets = new EntitySet<Street>(new Action<Street>(this.attach_Streets), new Action<Street>(this.detach_Streets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StreetTypeID
		{
			get
			{
				return this._StreetTypeID;
			}
			set
			{
				if ((this._StreetTypeID != value))
				{
					this.OnStreetTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StreetTypeID = value;
					this.SendPropertyChanged("StreetTypeID");
					this.OnStreetTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suffix", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Suffix
		{
			get
			{
				return this._Suffix;
			}
			set
			{
				if ((this._Suffix != value))
				{
					this.OnSuffixChanging(value);
					this.SendPropertyChanging();
					this._Suffix = value;
					this.SendPropertyChanged("Suffix");
					this.OnSuffixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StreetType_Street", Storage="_Streets", ThisKey="StreetTypeID", OtherKey="StreetTypeID")]
		public EntitySet<Street> Streets
		{
			get
			{
				return this._Streets;
			}
			set
			{
				this._Streets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.StreetType = this;
		}
		
		private void detach_Streets(Street entity)
		{
			this.SendPropertyChanging();
			entity.StreetType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payer")]
	public partial class Payer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayerID;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private byte _Sex;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private int _BenefitID;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<Registration> _Registrations;
		
		private EntityRef<Benefit> _Benefit;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayerIDChanging(int value);
    partial void OnPayerIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSexChanging(byte value);
    partial void OnSexChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnBenefitIDChanging(int value);
    partial void OnBenefitIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public Payer()
		{
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Benefit = default(EntityRef<Benefit>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayerID
		{
			get
			{
				return this._PayerID;
			}
			set
			{
				if ((this._PayerID != value))
				{
					this.OnPayerIDChanging(value);
					this.SendPropertyChanging();
					this._PayerID = value;
					this.SendPropertyChanged("PayerID");
					this.OnPayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="TinyInt NOT NULL")]
		public byte Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BenefitID", DbType="Int NOT NULL")]
		public int BenefitID
		{
			get
			{
				return this._BenefitID;
			}
			set
			{
				if ((this._BenefitID != value))
				{
					if (this._Benefit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBenefitIDChanging(value);
					this.SendPropertyChanging();
					this._BenefitID = value;
					this.SendPropertyChanged("BenefitID");
					this.OnBenefitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payer_Registration", Storage="_Registrations", ThisKey="PayerID", OtherKey="PayerID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Benefit_Payer", Storage="_Benefit", ThisKey="BenefitID", OtherKey="BenefitID", IsForeignKey=true)]
		public Benefit Benefit
		{
			get
			{
				return this._Benefit.Entity;
			}
			set
			{
				Benefit previousValue = this._Benefit.Entity;
				if (((previousValue != value) 
							|| (this._Benefit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Benefit.Entity = null;
						previousValue.Payers.Remove(this);
					}
					this._Benefit.Entity = value;
					if ((value != null))
					{
						value.Payers.Add(this);
						this._BenefitID = value.BenefitID;
					}
					else
					{
						this._BenefitID = default(int);
					}
					this.SendPropertyChanged("Benefit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Payer", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Payers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Payers.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Payer = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.Payer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private System.DateTime _Date;
		
		private System.DateTime _TargetMonth;
		
		private decimal _Amount;
		
		private int _RegistrationID;
		
		private int _ServiceID;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTargetMonthChanging(System.DateTime value);
    partial void OnTargetMonthChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    #endregion
		
		public Payment()
		{
			this._Service = default(EntityRef<Service>);
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetMonth", DbType="Date NOT NULL")]
		public System.DateTime TargetMonth
		{
			get
			{
				return this._TargetMonth;
			}
			set
			{
				if ((this._TargetMonth != value))
				{
					this.OnTargetMonthChanging(value);
					this.SendPropertyChanging();
					this._TargetMonth = value;
					this.SendPropertyChanged("TargetMonth");
					this.OnTargetMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", DbType="Int NOT NULL")]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Payment", Storage="_Service", ThisKey="ServiceID", OtherKey="ServiceID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._ServiceID = value.ServiceID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Payment", Storage="_Registration", ThisKey="RegistrationID", OtherKey="RegistrationID", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._RegistrationID = value.RegistrationID;
					}
					else
					{
						this._RegistrationID = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meter")]
	public partial class Meter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeterID;
		
		private int _RegistrationID;
		
		private int _MeterTypeID;
		
		private EntitySet<Reading> _Readings;
		
		private EntityRef<Registration> _Registration;
		
		private EntityRef<MeterType> _MeterType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeterIDChanging(int value);
    partial void OnMeterIDChanged();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnMeterTypeIDChanging(int value);
    partial void OnMeterTypeIDChanged();
    #endregion
		
		public Meter()
		{
			this._Readings = new EntitySet<Reading>(new Action<Reading>(this.attach_Readings), new Action<Reading>(this.detach_Readings));
			this._Registration = default(EntityRef<Registration>);
			this._MeterType = default(EntityRef<MeterType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeterID
		{
			get
			{
				return this._MeterID;
			}
			set
			{
				if ((this._MeterID != value))
				{
					this.OnMeterIDChanging(value);
					this.SendPropertyChanging();
					this._MeterID = value;
					this.SendPropertyChanged("MeterID");
					this.OnMeterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", DbType="Int NOT NULL")]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterTypeID", DbType="Int NOT NULL")]
		public int MeterTypeID
		{
			get
			{
				return this._MeterTypeID;
			}
			set
			{
				if ((this._MeterTypeID != value))
				{
					if (this._MeterType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeterTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MeterTypeID = value;
					this.SendPropertyChanged("MeterTypeID");
					this.OnMeterTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meter_Reading", Storage="_Readings", ThisKey="MeterID", OtherKey="MeterID")]
		public EntitySet<Reading> Readings
		{
			get
			{
				return this._Readings;
			}
			set
			{
				this._Readings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Meter", Storage="_Registration", ThisKey="RegistrationID", OtherKey="RegistrationID", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Meters.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Meters.Add(this);
						this._RegistrationID = value.RegistrationID;
					}
					else
					{
						this._RegistrationID = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterType_Meter", Storage="_MeterType", ThisKey="MeterTypeID", OtherKey="MeterTypeID", IsForeignKey=true)]
		public MeterType MeterType
		{
			get
			{
				return this._MeterType.Entity;
			}
			set
			{
				MeterType previousValue = this._MeterType.Entity;
				if (((previousValue != value) 
							|| (this._MeterType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeterType.Entity = null;
						previousValue.Meters.Remove(this);
					}
					this._MeterType.Entity = value;
					if ((value != null))
					{
						value.Meters.Add(this);
						this._MeterTypeID = value.MeterTypeID;
					}
					else
					{
						this._MeterTypeID = default(int);
					}
					this.SendPropertyChanged("MeterType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Readings(Reading entity)
		{
			this.SendPropertyChanging();
			entity.Meter = this;
		}
		
		private void detach_Readings(Reading entity)
		{
			this.SendPropertyChanging();
			entity.Meter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registration")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationID;
		
		private int _FlatID;
		
		private int _PayerID;
		
		private System.DateTime _PaymentStartDate;
		
		private System.Nullable<System.DateTime> _PaymentFinishDate;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<Meter> _Meters;
		
		private EntityRef<Flat> _Flat;
		
		private EntityRef<Payer> _Payer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnFlatIDChanging(int value);
    partial void OnFlatIDChanged();
    partial void OnPayerIDChanging(int value);
    partial void OnPayerIDChanged();
    partial void OnPaymentStartDateChanging(System.DateTime value);
    partial void OnPaymentStartDateChanged();
    partial void OnPaymentFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentFinishDateChanged();
    #endregion
		
		public Registration()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Meters = new EntitySet<Meter>(new Action<Meter>(this.attach_Meters), new Action<Meter>(this.detach_Meters));
			this._Flat = default(EntityRef<Flat>);
			this._Payer = default(EntityRef<Payer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlatID", DbType="Int NOT NULL")]
		public int FlatID
		{
			get
			{
				return this._FlatID;
			}
			set
			{
				if ((this._FlatID != value))
				{
					if (this._Flat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlatIDChanging(value);
					this.SendPropertyChanging();
					this._FlatID = value;
					this.SendPropertyChanged("FlatID");
					this.OnFlatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayerID", DbType="Int NOT NULL")]
		public int PayerID
		{
			get
			{
				return this._PayerID;
			}
			set
			{
				if ((this._PayerID != value))
				{
					if (this._Payer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayerIDChanging(value);
					this.SendPropertyChanging();
					this._PayerID = value;
					this.SendPropertyChanged("PayerID");
					this.OnPayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStartDate", DbType="Date NOT NULL")]
		public System.DateTime PaymentStartDate
		{
			get
			{
				return this._PaymentStartDate;
			}
			set
			{
				if ((this._PaymentStartDate != value))
				{
					this.OnPaymentStartDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentStartDate = value;
					this.SendPropertyChanged("PaymentStartDate");
					this.OnPaymentStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentFinishDate", DbType="Date")]
		public System.Nullable<System.DateTime> PaymentFinishDate
		{
			get
			{
				return this._PaymentFinishDate;
			}
			set
			{
				if ((this._PaymentFinishDate != value))
				{
					this.OnPaymentFinishDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentFinishDate = value;
					this.SendPropertyChanged("PaymentFinishDate");
					this.OnPaymentFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Payment", Storage="_Payments", ThisKey="RegistrationID", OtherKey="RegistrationID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Meter", Storage="_Meters", ThisKey="RegistrationID", OtherKey="RegistrationID")]
		public EntitySet<Meter> Meters
		{
			get
			{
				return this._Meters;
			}
			set
			{
				this._Meters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flat_Registration", Storage="_Flat", ThisKey="FlatID", OtherKey="FlatID", IsForeignKey=true)]
		public Flat Flat
		{
			get
			{
				return this._Flat.Entity;
			}
			set
			{
				Flat previousValue = this._Flat.Entity;
				if (((previousValue != value) 
							|| (this._Flat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flat.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Flat.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._FlatID = value.FlatID;
					}
					else
					{
						this._FlatID = default(int);
					}
					this.SendPropertyChanged("Flat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payer_Registration", Storage="_Payer", ThisKey="PayerID", OtherKey="PayerID", IsForeignKey=true)]
		public Payer Payer
		{
			get
			{
				return this._Payer.Entity;
			}
			set
			{
				Payer previousValue = this._Payer.Entity;
				if (((previousValue != value) 
							|| (this._Payer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payer.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._Payer.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._PayerID = value.PayerID;
					}
					else
					{
						this._PayerID = default(int);
					}
					this.SendPropertyChanged("Payer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
		
		private void attach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitID;
		
		private string _Fullname;
		
		private string _Name;
		
		private EntitySet<Service> _Services;
		
		private EntitySet<MeterType> _MeterTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Unit()
		{
			this._Services = new EntitySet<Service>(new Action<Service>(this.attach_Services), new Action<Service>(this.detach_Services));
			this._MeterTypes = new EntitySet<MeterType>(new Action<MeterType>(this.attach_MeterTypes), new Action<MeterType>(this.detach_MeterTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Service", Storage="_Services", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<Service> Services
		{
			get
			{
				return this._Services;
			}
			set
			{
				this._Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_MeterType", Storage="_MeterTypes", ThisKey="UnitID", OtherKey="UnitID")]
		public EntitySet<MeterType> MeterTypes
		{
			get
			{
				return this._MeterTypes;
			}
			set
			{
				this._MeterTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Services(Service entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_MeterTypes(MeterType entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_MeterTypes(MeterType entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeterType")]
	public partial class MeterType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeterTypeID;
		
		private string _Name;
		
		private int _UnitID;
		
		private EntitySet<Meter> _Meters;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeterTypeIDChanging(int value);
    partial void OnMeterTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitIDChanging(int value);
    partial void OnUnitIDChanged();
    #endregion
		
		public MeterType()
		{
			this._Meters = new EntitySet<Meter>(new Action<Meter>(this.attach_Meters), new Action<Meter>(this.detach_Meters));
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeterTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeterTypeID
		{
			get
			{
				return this._MeterTypeID;
			}
			set
			{
				if ((this._MeterTypeID != value))
				{
					this.OnMeterTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MeterTypeID = value;
					this.SendPropertyChanged("MeterTypeID");
					this.OnMeterTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitID", DbType="Int NOT NULL")]
		public int UnitID
		{
			get
			{
				return this._UnitID;
			}
			set
			{
				if ((this._UnitID != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIDChanging(value);
					this.SendPropertyChanging();
					this._UnitID = value;
					this.SendPropertyChanged("UnitID");
					this.OnUnitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeterType_Meter", Storage="_Meters", ThisKey="MeterTypeID", OtherKey="MeterTypeID")]
		public EntitySet<Meter> Meters
		{
			get
			{
				return this._Meters;
			}
			set
			{
				this._Meters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_MeterType", Storage="_Unit", ThisKey="UnitID", OtherKey="UnitID", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.MeterTypes.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.MeterTypes.Add(this);
						this._UnitID = value.UnitID;
					}
					else
					{
						this._UnitID = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.MeterType = this;
		}
		
		private void detach_Meters(Meter entity)
		{
			this.SendPropertyChanging();
			entity.MeterType = null;
		}
	}
}
#pragma warning restore 1591
